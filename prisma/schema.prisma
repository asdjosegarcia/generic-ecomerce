generator client {
    provider = "prisma-client-js" //esto dice que vamos a estar creando codigo para javascript
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Product {
    id              Int              @id @default(autoincrement()) // Int el id es un entero, @id es un identificador unico, (autoincrement()) y se va a ir incrementando
    title           String?          @default("Product")
    price           Float            @default(0.00)
    discountPrice   Float            @default(0)
    condition       String           @default("New")
    shipment        Float            @default(0.00) //
    qualification   Float            @default(5)
    previewImg      String           @default("https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse3.mm.bing.net%2Fth%3Fid%3DOIP.c2t8tS3Bw3wAu29lJZXcKgAAAA%26pid%3DApi&f=1&ipt=152bbe465eda1732e5837221e4a9c09866e36e0f8f0695e54deb8379d78f64b0&ipo=images")
    seller          String? //por el momento no lo agregamos por que no se relacionar usuarios
    createdAt       DateTime         @default(now()) //de tipo fecha, y por defecto va a ser la fecha en la que se ha guardado
    views           Int?             @default(0)
    //////////relacion informacion extra del producto
    ProductComplete ProductComplete? //establece relacion 1 a 1, ya que product solo puede tener 1 ProductComplete
    //////////relacion categoria
    category        Category         @relation(fields: [categoryId], references: [id]) //relation indica relacion con otra tabla,field con que columna de la tabla actual se relaciona,refetence con que columna de la otra tabla se relaciona 
    categoryId      Int              @default(1)
    // Comment Comment[]
    comments        Comment[] //relacion 1 a muchos,
    Question        Question[]
}

model ProductComplete {
    id          Int        @id
    stock       Int        @default(1)
    description String? //tipo string, ? por que es opcional
    images      Json?      @default("{ \"image1\": \"https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fpixsector.com%2Fcache%2F517d8be6%2Fav5c8336583e291842624.png&f=1&nofb=1&ipt=f0dd3636f84b1ff677873f0bacc0999feaa87f94ce139855b0cdc836bf7246f3&ipo=images\"}")
    colors      Json?      @default("{}")
    ////////////relacion Product
    addComplete Product    @relation(fields: [id], references: [id]) //addToComplete nombre de la relacion,Product el Modelo a relacionarse,@relacion especifica relacion,fields:[] columnas que se utilizan en el model ProductComplete,references:[] columnas de Product, en este caso la columna id
    //////////relacion comentarios
    comments    Comment[] //relacion 1 a muchos,
    question    Question[]
}

model Question {
    id                Int              @id @default(autoincrement())
    question          String?
    ProductComplete   ProductComplete? @relation(fields: [productCompleteId], references: [id])
    productCompleteId Int
    Product           Product?         @relation(fields: [productId], references: [id]) //relacion 1 a 1 con products
    productId         Int
}

model Comment {
    id                Int              @id @default(autoincrement())
    qualification     Float            @default(5.00)
    comment           String?
    ProductComplete   ProductComplete? @relation(fields: [productCompleteId], references: [id])
    productCompleteId Int
    Product           Product?         @relation(fields: [productId], references: [id]) //relacion 1 a 1 con products
    productId         Int
}

model Category {
    id       Int       @id @default(autoincrement())
    name     String    @unique
    products Product[] //products es una relación uno a muchos con la entidad Product, indicando que una categoría puede tener varios productos, pero un producto pertenece a una sola categoría.
}
