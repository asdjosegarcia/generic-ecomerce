generator client {
    provider = "prisma-client-js" //esto dice que vamos a estar creando codigo para javascript
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            Int            @id @default(autoincrement())
    email         String         @unique
    username      String         @unique
    password      String
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    ///////////////relacion cart
    cart          Cart? //relacion 1 a 1
    ///////////////relacion notificaciones
    notifications Notifications?
    //////////////relacion preguntas
    questions     Question[] //relacion uno a muchos
    //////////////relacion Favorites
    favorites     Favorites? //relacion 1 a 1 
    //////////////relacion UserPuschases 
    userPurchases UserPurchases?
    //////////////relacion userProducts
    userProducts  UserProducts?
}

model Favorites {
    id       Int       @id @default(autoincrement())
    password String //borrar
    //////////relacion 1 a 1 con products
    user     User      @relation(fields: [id], references: [id])
    //////////relacion 1 a muchos con products
    products Product[] @relation("favoritesPorducts")
}

model Cart {
    id       Int       @id @default(autoincrement())
    password String
    //////////////relacion con user
    user     User      @relation(fields: [id], references: [id]) //relacion 1 a 1 , 1 usuario puede tener 1 cart
    //////////////relacion con products
    products Product[] @relation("cartProducts") //relacion 1 a muchos, cart puede tener varios productos, pero product solo puede tener 1 cart
}

model Notifications {
    id           Int            @id @default(autoincrement())
    // password     String
    //////////////relacion user
    user         User           @relation(fields: [id], references: [id])
    //////////////relacion notificacion
    notification Notification[] //relacion 1 a muchos
}

model Notification {
    id              Int            @id @default(autoincrement())
    createdAt       DateTime       @default(now())
    type            Int            @default(1)
    view            Boolean        @default(false)
    title           String?
    description     String?
    icon            String?
    iconBase        Bytes?
    iconMimetype    String?
    link            String?
    //relacion notificacion
    notifications   Notifications? @relation(fields: [notificationsId], references: [id])
    notificationsId Int            @default(1)
    //relacion con product
    product         Product[]      @relation("notificationProducts")
}

model Product {
    id                    Int                  @id @default(autoincrement()) // Int el id es un entero, @id es un identificador unico, (autoincrement()) y se va a ir incrementando
    title                 String?              @default("Product")
    price                 Float                @default(0.00)
    condition             String               @default("New")
    shipment              Float                @default(0.00) //
    qualification         Float                @default(5)
    previewImg            String               @default("")
    seller                String?
    createdAt             DateTime             @default(now()) //de tipo fecha, y por defecto va a ser la fecha en la que se ha guardado
    views                 Int                  @default(0)
    discount              Int                  @default(0)
    //////////relacion informacion extra del producto
    ProductComplete       ProductComplete? //establece relacion 1 a 1, ya que product solo puede tener 1 ProductComplete
    //////////relacion categoria
    category              Category[]
    //////////relacion comentarios
    comments              Comment[] //relacion muchos a muchos,
    //////////relacion preguntas
    Question              Question[]
    //////////relacion carrito
    cart                  Cart[]               @relation("cartProducts")
    //////////relacion Favoritos 
    favorites             Favorites[]          @relation("favoritesPorducts")
    //////////relacion preievImgBase64
    previewImgBase        ProductPreviewImage? // Relación 1 a 1 opcional
    productPreviewImageId Int?
    //////////relacion con userrProducts
    userProducts          UserProducts         @relation(fields: [userProductsId], references: [id])
    userProductsId        Int
    //////////relacion con notification
    notification          Notification[]       @relation("notificationProducts")
}

model ProductPreviewImage {
    id        Int      @id @default(autoincrement())
    name      String   @default("")
    mimetype  String   @default("")
    data      Bytes?
    //relacion con product
    product   Product? @relation(fields: [productId], references: [id])
    productId Int      @unique
    //relacion con 
}

model ProductComplete {
    id            Int             @id
    stock         Int             @default(1)
    description   String? //tipo string, ? por que es opcional
    images        Json?           @default("{ \"image1\": \"https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fpixsector.com%2Fcache%2F517d8be6%2Fav5c8336583e291842624.png&f=1&nofb=1&ipt=f0dd3636f84b1ff677873f0bacc0999feaa87f94ce139855b0cdc836bf7246f3&ipo=images\"}")
    colors        Json?           @default("{}")
    ////////////relacion Product
    addComplete   Product         @relation(fields: [id], references: [id]) //addToComplete nombre de la relacion,Product el Modelo a relacionarse,@relacion especifica relacion,fields:[] columnas que se utilizan en el model ProductComplete,references:[] columnas de Product, en este caso la columna id
    //////////relacion comentarios
    comments      Comment[] //relacion 1 a muchos,
    //////////relacion question
    question      Question[]
    //////////relacion  ProductImages
    productImages ProductImages[]
}

model Question {
    id                Int              @id @default(autoincrement())
    question          String?
    like              Int              @default(0)
    dislike           Int              @default(0)
    ProductComplete   ProductComplete? @relation(fields: [productCompleteId], references: [id])
    productCompleteId Int
    ///////////relacion porduct
    Product           Product?         @relation(fields: [productId], references: [id]) //relacion 1 a muchos
    productId         Int
    ///////////relacion user
    User              User?            @relation(fields: [username], references: [username]) //relacion 1 a muchos con products
    username          String?
}

model Comment {
    id                Int              @id @default(autoincrement())
    qualification     Float            @default(5.00)
    comment           String?
    ProductComplete   ProductComplete? @relation(fields: [productCompleteId], references: [id])
    productCompleteId Int
    Product           Product?         @relation(fields: [productId], references: [id]) //relacion 1 a 1 con products
    productId         Int
}

model Category {
    id       Int       @id @default(autoincrement())
    name     String    @unique
    products Product[] //products es una relación uno a muchos con la entidad Product, indicando que una categoría puede tener varios productos, pero un producto pertenece a una sola categoría.
}

model ProductImages {
    id                Int              @id @default(autoincrement())
    name              String           @default("")
    mimetype          String           @default("")
    data              Bytes?
    //relacion con productComplete
    productComplete   ProductComplete? @relation(fields: [productCompleteId], references: [id])
    productCompleteId Int?
}

model UserPurchases {
    id               Int                @id @default(autoincrement())
    //relacion con user
    user             User?              @relation(fields: [userId], references: [id])
    userId           Int                @unique
    //relacion con PurchasedProduct
    purchasedProduct PurchasedProduct[]
}

model UserProducts {
    id       Int       @id @default(autoincrement())
    //relacion con user
    user     User?     @relation(fields: [userId], references: [id])
    userId   Int       @unique
    //relacion con Prodcuts
    products Product[]
}

model PurchasedProduct {
    id                 Int           @id @default(autoincrement())
    originalId         Int
    title              String?       @default("Product")
    price              Float?
    createdAt          DateTime      @default(now())
    paymentType        String        @default("")
    condition          String?
    shipment           Float         @default(0.00) //
    seller             String?
    previewImg         String        @default("")
    previewImgBase     Bytes?
    previewImgMimetype String        @default("")
    units              Int           @default(1)
    //relacion con UserPurchases
    userPurchases      UserPurchases @relation(fields: [userPurchasesId], references: [id])
    userPurchasesId    Int
}
